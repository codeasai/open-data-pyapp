import os
from utils.db_utils import Database
import pandas as pd

def check_database():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≠‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• SQLite"""
    db_file = 'data/database.sqlite'
    return os.path.exists(db_file)

def create_sample_data(db):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
        existing_data = db.get_datasets()
        if existing_data:
            df = pd.DataFrame(existing_data)
            return True, "‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", df

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
        sample_data = {
            'datasets': [
                {
                    'title': '‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 1',
                    'organization': '‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô A',
                    'resource_count': 2,
                    'file_types': 'CSV, JSON',
                    'last_updated': '2024-03-20',
                    'package_id': 'sample-1',
                    'url': 'https://example.com/1'
                },
                {
                    'title': '‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 2',
                    'organization': '‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô B',
                    'resource_count': 3,
                    'file_types': 'PDF, XLSX',
                    'last_updated': '2024-03-21',
                    'package_id': 'sample-2',
                    'url': 'https://example.com/2'
                }
            ],
            'resources': [
                {
                    'dataset_id': 'sample-1',
                    'file_name': 'data1.csv',
                    'format': 'CSV',
                    'url': 'https://example.com/1/csv',
                    'description': '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• CSV',
                    'ranking': 4
                },
                {
                    'dataset_id': 'sample-1',
                    'file_name': 'data1.json',
                    'format': 'JSON',
                    'url': 'https://example.com/1/json',
                    'description': '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON',
                    'ranking': 4
                },
                {
                    'dataset_id': 'sample-2',
                    'file_name': 'data2.pdf',
                    'format': 'PDF',
                    'url': 'https://example.com/2/pdf',
                    'description': '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• PDF',
                    'ranking': 4
                },
                {
                    'dataset_id': 'sample-2',
                    'file_name': 'data2.xlsx',
                    'format': 'XLSX',
                    'url': 'https://example.com/2/xlsx',
                    'description': '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• XLSX',
                    'ranking': 4
                }
            ]
        }
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
        if db.init_sample_data(sample_data):
            df = pd.DataFrame(sample_data['datasets'])
            return True, "‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", df
        return False, "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ", None
    except Exception as e:
        return False, f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: {str(e)}", None

def main(silent=False):
    """
    ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    
    Args:
        silent (bool): ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô True ‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    
    Returns:
        tuple: (success, message, df)
            - success: bool ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
            - message: str ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
            - df: DataFrame ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤
    """
    db = Database()
    db_exists = check_database()
    json_files = {
        'datasets': 'data/datasets_info.json',
        'resources': 'data/dataset_files.json'
    }
    has_json = all(os.path.exists(path) for path in json_files.values())
    
    if not silent:
        print(f"üóÑÔ∏è ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• SQLite: {'‚úÖ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' if db_exists else '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå'}")
        print(f"üìÑ ‡πÑ‡∏ü‡∏•‡πå JSON: {'‚úÖ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' if has_json else '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå'}")
    
    try:
        # 1. ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ SQLite ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å SQLite
        if db_exists:
            datasets = db.get_datasets()
            if datasets:
                df = pd.DataFrame(datasets)
                return True, "‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å SQLite ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", df
        
        # 2. ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå JSON ‡πÉ‡∏´‡πâ migrate ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        if has_json:
            if not silent:
                print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á migrate ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å JSON...")
            if db.migrate_from_json():
                datasets = db.get_datasets()
                if datasets:
                    df = pd.DataFrame(datasets)
                    return True, "‚úÖ Migrate ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å JSON ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", df
        
        # 3. ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á SQLite ‡πÅ‡∏•‡∏∞ JSON ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
        if not silent:
            print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô SQLite ‡πÅ‡∏•‡∏∞ JSON")
            print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á...")
        return create_sample_data(db)

    except Exception as e:
        return False, f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {str(e)}", None

if __name__ == "__main__":
    success, message, df = main()
    print(message)
    if success and df is not None:
        print(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î: {len(df)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")