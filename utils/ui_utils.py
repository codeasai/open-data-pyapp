import streamlit as st
import time
from .data_utils import update_dataset
import json

def create_action_cell(row):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏î‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á"""
    col1, col2 = st.columns([1, 2])
    with col1:
        st.markdown(f'<a href="{row["url"]}" target="_blank">üîó</a>', unsafe_allow_html=True)
    with col2:
        if st.button("Load", key=f"load_{row['package_id']}", help=f"‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"):
            result = update_dataset(row['package_id'])
            st.toast(result)
            if "‚úÖ" in result:
                time.sleep(1)
                st.rerun()

def apply_custom_css():
    """‡πÉ‡∏™‡πà CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏Å‡πÅ‡∏ï‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö"""
    st.markdown("""
    <style>
    /* ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå */
    .file-type {
        display: inline-flex;
        align-items: center;
        gap: 4px;
        padding: 2px 8px;
        border-radius: 4px;
        margin-right: 8px;
        background-color: rgba(0, 0, 0, 0.05);
        white-space: nowrap;
    }

    /* ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå */
    [data-testid="column"]:nth-child(4) a {
        text-decoration: none;
        color: inherit;
        transition: all 0.2s;
    }

    [data-testid="column"]:nth-child(4) a:hover {
        background-color: rgba(0, 0, 0, 0.1);
    }

    /* ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå */
    .format-text {
        font-size: 0.9em;
        color: #666;
    }

    /* ... rest of your CSS ... */
    </style>
    """, unsafe_allow_html=True)

def create_ranking_selector(row):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á dropdown ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ranking"""
    ranking_options = {
        "‚≠ê‚≠ê‚≠ê‚≠ê": 4,
        "‚≠ê‚≠ê‚≠ê": 3,
        "‚≠ê‚≠ê": 2,
        "‚≠ê": 1,
        "‡πÑ‡∏°‡πà‡∏°‡∏µ": 0
    }
    
    # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ ranking ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    current_ranking = 0
    try:
        with open('data/dataset_files.json', 'r', encoding='utf-8') as f:
            all_files = json.load(f)
            for file in all_files:
                if file['dataset_id'] == row['package_id']:
                    current_ranking = file.get('ranking', 0)
                    break
    except:
        pass
    
    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ ranking ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    current_option = next(
        (k for k, v in ranking_options.items() if v == current_ranking),
        "‡πÑ‡∏°‡πà‡∏°‡∏µ"
    )
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á dropdown
    selected = st.selectbox(
        "‚≠ê",
        options=list(ranking_options.keys()),
        index=list(ranking_options.keys()).index(current_option),
        label_visibility="collapsed",
        key=f"rank_{row['package_id']}"
    )
    
    # ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
    if selected != current_option:
        from .data_utils import update_dataset_ranking
        if update_dataset_ranking(row['package_id'], ranking_options[selected]):
            st.toast(f"‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó ranking ‡πÄ‡∏õ‡πá‡∏ô {selected} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            time.sleep(1)
            st.rerun()
        else:
            st.toast("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó ranking ‡πÑ‡∏î‡πâ")

def toggle_theme():
    """‡∏™‡∏•‡∏±‡∏ö theme ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á light ‡πÅ‡∏•‡∏∞ dark"""
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö theme ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    current_theme = 'light' if 'theme' not in st.session_state else st.session_state.theme
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏•‡∏±‡∏ö theme
    if current_theme == 'light':
        theme_icon = "üåô"
        theme_tooltip = "Switch to Dark Mode"
    else:
        theme_icon = "‚òÄÔ∏è"
        theme_tooltip = "Switch to Light Mode"
    
    # ‡∏ß‡∏≤‡∏á theme switcher ‡∏ó‡∏µ‡πà‡∏°‡∏∏‡∏°‡∏Ç‡∏ß‡∏≤‡∏ö‡∏ô
    with st.container():
        st.markdown(
            f"""
            <div style="position: fixed; top: 0.5rem; right: 0.5rem; z-index: 1000;">
                <button 
                    onclick="switchTheme()" 
                    style="
                        background: none;
                        border: none;
                        font-size: 1.5rem;
                        cursor: pointer;
                        padding: 0.5rem;
                        border-radius: 50%;
                        transition: background-color 0.3s;
                        position: relative;
                        z-index: 99999;
                    "
                    title="{theme_tooltip}"
                >
                    {theme_icon}
                </button>
            </div>
            
            <script>
                function switchTheme() {{
                    const currentTheme = localStorage.getItem('theme') || 'light';
                    const newTheme = currentTheme === 'light' ? 'dark' : 'light';
                    
                    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å theme ‡πÉ‡∏´‡∏°‡πà
                    localStorage.setItem('theme', newTheme);
                    
                    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó CSS variables
                    document.body.classList.remove(currentTheme + '-theme');
                    document.body.classList.add(newTheme + '-theme');
                    
                    // ‡πÅ‡∏à‡πâ‡∏á Streamlit
                    window.parent.postMessage({{
                        type: 'streamlit:setSessionState',
                        key: 'theme',
                        value: newTheme
                    }}, '*');
                    
                    // ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
                    window.location.reload();
                }}
                
                // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ theme ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
                document.addEventListener('DOMContentLoaded', function() {{
                    const theme = localStorage.getItem('theme') || 'light';
                    document.body.classList.add(theme + '-theme');
                }});
                
                // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏õ‡∏∏‡πà‡∏°‡∏ñ‡∏π‡∏Å‡∏ã‡πà‡∏≠‡∏ô
                window.addEventListener('load', function() {{
                    const button = document.querySelector('button[onclick="switchTheme()"]');
                    if (button) {{
                        button.style.visibility = 'visible';
                    }}
                }});
            </script>
            """,
            unsafe_allow_html=True
        ) 